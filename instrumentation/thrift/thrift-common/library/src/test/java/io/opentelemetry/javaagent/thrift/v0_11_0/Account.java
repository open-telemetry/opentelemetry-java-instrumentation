/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */

package io.opentelemetry.javaagent.thrift.v0_11_0;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.11.0)",
    date = "2025-02-27")
public class Account
    implements org.apache.thrift.TBase<Account, Account._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<Account> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("Account");

  private static final org.apache.thrift.protocol.TField ZONE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "zone", org.apache.thrift.protocol.TType.STRING, (short) 1);
  private static final org.apache.thrift.protocol.TField CARD_ID_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "cardId", org.apache.thrift.protocol.TType.STRING, (short) 2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new AccountStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new AccountTupleSchemeFactory();

  public java.lang.String zone; // required
  public java.lang.String cardId; // required

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ZONE((short) 1, "zone"),
    CARD_ID((short) 2, "cardId");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // ZONE
          return ZONE;
        case 2: // CARD_ID
          return CARD_ID;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.ZONE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "zone",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.CARD_ID,
        new org.apache.thrift.meta_data.FieldMetaData(
            "cardId",
            org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Account.class, metaDataMap);
  }

  public Account() {}

  public Account(java.lang.String zone, java.lang.String cardId) {
    this();
    this.zone = zone;
    this.cardId = cardId;
  }

  /** Performs a deep copy on <i>other</i>. */
  public Account(Account other) {
    if (other.isSetZone()) {
      this.zone = other.zone;
    }
    if (other.isSetCardId()) {
      this.cardId = other.cardId;
    }
  }

  public Account deepCopy() {
    return new Account(this);
  }

  @Override
  public void clear() {
    this.zone = null;
    this.cardId = null;
  }

  public java.lang.String getZone() {
    return this.zone;
  }

  public Account setZone(java.lang.String zone) {
    this.zone = zone;
    return this;
  }

  public void unsetZone() {
    this.zone = null;
  }

  /** Returns true if field zone is set (has been assigned a value) and false otherwise */
  public boolean isSetZone() {
    return this.zone != null;
  }

  public void setZoneIsSet(boolean value) {
    if (!value) {
      this.zone = null;
    }
  }

  public java.lang.String getCardId() {
    return this.cardId;
  }

  public Account setCardId(java.lang.String cardId) {
    this.cardId = cardId;
    return this;
  }

  public void unsetCardId() {
    this.cardId = null;
  }

  /** Returns true if field cardId is set (has been assigned a value) and false otherwise */
  public boolean isSetCardId() {
    return this.cardId != null;
  }

  public void setCardIdIsSet(boolean value) {
    if (!value) {
      this.cardId = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
      case ZONE:
        if (value == null) {
          unsetZone();
        } else {
          setZone((java.lang.String) value);
        }
        break;

      case CARD_ID:
        if (value == null) {
          unsetCardId();
        } else {
          setCardId((java.lang.String) value);
        }
        break;
    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case ZONE:
        return getZone();

      case CARD_ID:
        return getCardId();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case ZONE:
        return isSetZone();
      case CARD_ID:
        return isSetCardId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null) return false;
    if (that instanceof Account) return this.equals((Account) that);
    return false;
  }

  public boolean equals(Account that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_zone = true && this.isSetZone();
    boolean that_present_zone = true && that.isSetZone();
    if (this_present_zone || that_present_zone) {
      if (!(this_present_zone && that_present_zone)) return false;
      if (!this.zone.equals(that.zone)) return false;
    }

    boolean this_present_cardId = true && this.isSetCardId();
    boolean that_present_cardId = true && that.isSetCardId();
    if (this_present_cardId || that_present_cardId) {
      if (!(this_present_cardId && that_present_cardId)) return false;
      if (!this.cardId.equals(that.cardId)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetZone()) ? 131071 : 524287);
    if (isSetZone()) hashCode = hashCode * 8191 + zone.hashCode();

    hashCode = hashCode * 8191 + ((isSetCardId()) ? 131071 : 524287);
    if (isSetCardId()) hashCode = hashCode * 8191 + cardId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Account other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetZone()).compareTo(other.isSetZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zone, other.zone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCardId()).compareTo(other.isSetCardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardId, other.cardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Account(");
    boolean first = true;

    sb.append("zone:");
    if (this.zone == null) {
      sb.append("null");
    } else {
      sb.append(this.zone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardId:");
    if (this.cardId == null) {
      sb.append("null");
    } else {
      sb.append(this.cardId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (zone == null) {
      throw new org.apache.thrift.protocol.TProtocolException(
          "Required field 'zone' was not present! Struct: " + toString());
    }
    if (cardId == null) {
      throw new org.apache.thrift.protocol.TProtocolException(
          "Required field 'cardId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccountStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    public AccountStandardScheme getScheme() {
      return new AccountStandardScheme();
    }
  }

  private static class AccountStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<Account> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Account struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zone = iprot.readString();
              struct.setZoneIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardId = iprot.readString();
              struct.setCardIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Account struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.zone != null) {
        oprot.writeFieldBegin(ZONE_FIELD_DESC);
        oprot.writeString(struct.zone);
        oprot.writeFieldEnd();
      }
      if (struct.cardId != null) {
        oprot.writeFieldBegin(CARD_ID_FIELD_DESC);
        oprot.writeString(struct.cardId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class AccountTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AccountTupleScheme getScheme() {
      return new AccountTupleScheme();
    }
  }

  private static class AccountTupleScheme extends org.apache.thrift.scheme.TupleScheme<Account> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Account struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.zone);
      oprot.writeString(struct.cardId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Account struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.zone = iprot.readString();
      struct.setZoneIsSet(true);
      struct.cardId = iprot.readString();
      struct.setCardIdIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
