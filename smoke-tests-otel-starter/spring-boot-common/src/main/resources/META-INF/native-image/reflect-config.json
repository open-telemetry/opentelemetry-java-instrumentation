[
  {
    "condition": {
      "typeReachable": "org.apache.commons.pool2.impl.BaseGenericObjectPool"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ],
    "name": "org.apache.commons.pool2.impl.DefaultEvictionPolicy"
  }
,
  {
    "condition": {
      "typeReachable": "com.zaxxer.hikari.util.ConcurrentBag"
    },
    "name": "[Lcom.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry;"
  },
  {
    "condition": {
      "typeReachable": "com.zaxxer.hikari.pool.PoolEntry"
    },
    "name": "[Ljava.sql.Statement;"
  },
  {
    "condition": {
      "typeReachable": "com.zaxxer.hikari.util.FastList"
    },
    "name": "[Ljava.sql.Statement;"
  },
  {
    "condition": {
      "typeReachable": "com.zaxxer.hikari.HikariConfig"
    },
    "name": "com.zaxxer.hikari.HikariConfig",
    "allDeclaredFields": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "setAutoCommit",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setConnectionTestQuery",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setDataSourceClassName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setMinimumIdle",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "condition": {
      "typeReachable": "com.zaxxer.hikari.HikariJNDIFactory"
    },
    "name": "com.zaxxer.hikari.HikariConfig",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "setDataSourceJNDI",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setDriverClassName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setJdbcUrl",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setMaxLifetime",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setMaximumPoolSize",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setPassword",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setUsername",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "condition": {
      "typeReachable": "com.zaxxer.hikari.hibernate.HikariConfigurationUtil"
    },
    "name": "com.zaxxer.hikari.HikariConfig",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "setAutoCommit",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setConnectionTestQuery",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setDataSourceClassName",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "condition": {
      "typeReachable": "com.zaxxer.hikari.util.PropertyElf"
    },
    "name": "com.zaxxer.hikari.HikariConfig",
    "methods": [
      {
        "name": "getCatalog",
        "parameterTypes": []
      },
      {
        "name": "getConnectionInitSql",
        "parameterTypes": []
      },
      {
        "name": "getConnectionTestQuery",
        "parameterTypes": []
      },
      {
        "name": "getConnectionTimeout",
        "parameterTypes": []
      },
      {
        "name": "getDataSource",
        "parameterTypes": []
      },
      {
        "name": "getDataSourceClassName",
        "parameterTypes": []
      },
      {
        "name": "getDataSourceJNDI",
        "parameterTypes": []
      },
      {
        "name": "getDataSourceProperties",
        "parameterTypes": []
      },
      {
        "name": "getDriverClassName",
        "parameterTypes": []
      },
      {
        "name": "getExceptionOverrideClassName",
        "parameterTypes": []
      },
      {
        "name": "getHealthCheckProperties",
        "parameterTypes": []
      },
      {
        "name": "getHealthCheckRegistry",
        "parameterTypes": []
      },
      {
        "name": "getIdleTimeout",
        "parameterTypes": []
      },
      {
        "name": "getInitializationFailTimeout",
        "parameterTypes": []
      },
      {
        "name": "getJdbcUrl",
        "parameterTypes": []
      },
      {
        "name": "getKeepaliveTime",
        "parameterTypes": []
      },
      {
        "name": "getLeakDetectionThreshold",
        "parameterTypes": []
      },
      {
        "name": "getMaxLifetime",
        "parameterTypes": []
      },
      {
        "name": "getMaximumPoolSize",
        "parameterTypes": []
      },
      {
        "name": "getMetricRegistry",
        "parameterTypes": []
      },
      {
        "name": "getMetricsTrackerFactory",
        "parameterTypes": []
      },
      {
        "name": "getMinimumIdle",
        "parameterTypes": []
      },
      {
        "name": "getPassword",
        "parameterTypes": []
      },
      {
        "name": "getPoolName",
        "parameterTypes": []
      },
      {
        "name": "getScheduledExecutor",
        "parameterTypes": []
      },
      {
        "name": "getScheduledExecutorService",
        "parameterTypes": []
      },
      {
        "name": "getSchema",
        "parameterTypes": []
      },
      {
        "name": "getThreadFactory",
        "parameterTypes": []
      },
      {
        "name": "getTransactionIsolation",
        "parameterTypes": []
      },
      {
        "name": "getUsername",
        "parameterTypes": []
      },
      {
        "name": "getValidationTimeout",
        "parameterTypes": []
      },
      {
        "name": "isAllowPoolSuspension",
        "parameterTypes": []
      },
      {
        "name": "isAutoCommit",
        "parameterTypes": []
      },
      {
        "name": "isInitializationFailFast",
        "parameterTypes": []
      },
      {
        "name": "isIsolateInternalQueries",
        "parameterTypes": []
      },
      {
        "name": "isJdbc4ConnectionTest",
        "parameterTypes": []
      },
      {
        "name": "isReadOnly",
        "parameterTypes": []
      },
      {
        "name": "isRegisterMbeans",
        "parameterTypes": []
      }
    ],
    "queriedMethods": [
      {
        "name": "setAllowPoolSuspension",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setAutoCommit",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setCatalog",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setConnectionInitSql",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setConnectionTestQuery",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setConnectionTimeout",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setDataSource",
        "parameterTypes": [
          "javax.sql.DataSource"
        ]
      },
      {
        "name": "setDataSourceClassName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setDataSourceJNDI",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setDataSourceProperties",
        "parameterTypes": [
          "java.util.Properties"
        ]
      },
      {
        "name": "setDriverClassName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setExceptionOverrideClassName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setHealthCheckProperties",
        "parameterTypes": [
          "java.util.Properties"
        ]
      },
      {
        "name": "setHealthCheckRegistry",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "setIdleTimeout",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setInitializationFailTimeout",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setInitializationFailFast",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setIsolateInternalQueries",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setJdbc4ConnectionTest",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setJdbcUrl",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setKeepaliveTime",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setLeakDetectionThreshold",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setMaxLifetime",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setMaximumPoolSize",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setMetricRegistry",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "setMetricsTrackerFactory",
        "parameterTypes": [
          "com.zaxxer.hikari.metrics.MetricsTrackerFactory"
        ]
      },
      {
        "name": "setMinimumIdle",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setPassword",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setPoolName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setReadOnly",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setRegisterMbeans",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setScheduledExecutor",
        "parameterTypes": [
          "java.util.concurrent.ScheduledExecutorService"
        ]
      },
      {
        "name": "setScheduledExecutorService",
        "parameterTypes": [
          "java.util.concurrent.ScheduledThreadPoolExecutor"
        ]
      },
      {
        "name": "setSchema",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setThreadFactory",
        "parameterTypes": [
          "java.util.concurrent.ThreadFactory"
        ]
      },
      {
        "name": "setTransactionIsolation",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setUsername",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setValidationTimeout",
        "parameterTypes": [
          "long"
        ]
      }
    ]
  },
  {
    "condition": {
      "typeReachable": "com.zaxxer.hikari.util.UtilityElf"
    },
    "name": "java.sql.Connection",
    "fields": []
  },
  {
    "condition": {
      "typeReachable": "com.zaxxer.hikari.util.Sequence$Factory"
    },
    "name": "java.util.concurrent.atomic.LongAdder"
  },
  {
    "name": "org.apache.kafka.clients.consumer.CooperativeStickyAssignor",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.ConsumerPartitionAssignor"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.clients.consumer.RangeAssignor",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.ConsumerPartitionAssignor"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.clients.consumer.RoundRobinAssignor",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.ConsumerPartitionAssignor"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.clients.consumer.StickyAssignor",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.ConsumerPartitionAssignor"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.clients.producer.RoundRobinPartitioner",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.metrics.JmxReporter",
    "condition": {
      "typeReachable": "org.apache.kafka.common.utils.Utils"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.security.authenticator.AbstractLogin$DefaultLoginCallbackHandler",
    "condition": {
      "typeReachable": "org.apache.kafka.common.security.authenticator.LoginManager"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.security.authenticator.DefaultLogin",
    "condition": {
      "typeReachable": "org.apache.kafka.common.security.authenticator.LoginManager"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.security.authenticator.SaslClientCallbackHandler",
    "condition": {
      "typeReachable": "org.apache.kafka.common.network.SaslChannelBuilder"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.security.plain.PlainLoginModule",
    "condition": {
      "typeReachable": "org.apache.kafka.common.security.authenticator.AbstractLogin"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.BooleanDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.BooleanSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.ByteArrayDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.ByteArraySerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.ByteBufferDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.ByteBufferSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.BytesDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.BytesSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.DoubleDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.DoubleSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.FloatDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.FloatSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.IntegerDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.IntegerSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.ListDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.ListSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.LongDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.LongSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$BooleanSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListDeserializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$BooleanSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$ByteArraySerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$ByteBufferSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$BytesSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$DoubleSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$FloatSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$IntegerSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$LongSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$ShortSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$StringSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$UUIDSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.Serdes$VoidSerde",
    "condition": {
      "typeReachable": "org.apache.kafka.common.serialization.ListSerializer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.ShortDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.ShortSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.StringDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.StringSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.UUIDDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.UUIDSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.VoidDeserializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.consumer.KafkaConsumer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.VoidSerializer",
    "condition": {
      "typeReachable": "org.apache.kafka.clients.producer.KafkaProducer"
    },
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [

        ]
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.utils.AppInfoParser$AppInfo",
    "queryAllPublicConstructors": true,
    "condition": {
      "typeReachable": "org.apache.kafka.common.utils.AppInfoParser"
    }
  },
  {
    "name": "org.apache.kafka.common.utils.AppInfoParser$AppInfoMBean",
    "queryAllPublicMethods": true,
    "condition": {
      "typeReachable": "org.apache.kafka.common.utils.AppInfoParser"
    }
  }
]
